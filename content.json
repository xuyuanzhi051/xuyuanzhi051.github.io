{"meta":{"title":"许远志的博客","subtitle":"我再站高些，让你抬头可见，触手不及。","description":"","author":"许远志","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"JAVA400行代码实现飞翔的小鸟","slug":"JAVA400行代码实现飞翔的小鸟","date":"2020-04-09T02:21:33.000Z","updated":"2020-04-09T02:56:00.243Z","comments":true,"path":"2020/04/09/JAVA400行代码实现飞翔的小鸟/","link":"","permalink":"http://yoursite.com/2020/04/09/JAVA400%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E9%A3%9E%E7%BF%94%E7%9A%84%E5%B0%8F%E9%B8%9F/","excerpt":"ps:虽然是看着教程写出来的，但是这是第一次实现一个项目还是挺开心的，还是自己以前玩过的游戏飞翔的小鸟相信大家也都玩过，就是不停点击屏幕既要保证小鸟不落地，也要保证小鸟要穿过柱子先来看一下效果图吧：接下来就是重点了：我们需要把游戏中用到的场景先要实现出来@TOC 1.定义小鸟类","text":"ps:虽然是看着教程写出来的，但是这是第一次实现一个项目还是挺开心的，还是自己以前玩过的游戏飞翔的小鸟相信大家也都玩过，就是不停点击屏幕既要保证小鸟不落地，也要保证小鸟要穿过柱子先来看一下效果图吧：接下来就是重点了：我们需要把游戏中用到的场景先要实现出来@TOC 1.定义小鸟类 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102import javax.imageio.ImageIO;import java.awt.image.BufferedImage;/** * 小鸟 */public class Bird &#123; //图片 BufferedImage image; //位置 int x,y; //宽高 int width,height; //大小（用于碰撞检测） int size; //重力加速度 double g; //位移的间隔时间 double t; //最初上抛速度 double v0; //当前上抛速度 double speed; //经过时间t之后的位移 double s; //小鸟的倾角（弧度） double alpha; //一组图片，记录小鸟的动画帧 BufferedImage[] images; //动画帧数组的下标 int index; //初始化小鸟 public Bird() throws Exception&#123; //初始化基本参数 image =ImageIO.read(getClass().getResource(\"/resources/0.png\")); width=image.getWidth(); height=image.getHeight(); x=132; y=280; size=40; //初始化位移参数 g=4; v0=20; t=0.25; speed=v0; s=0; alpha=0; //初始化动画帧参数 images=new BufferedImage[8]; for(int i=0;i&lt;8;i++) &#123; images[i]=ImageIO.read(getClass().getResource(\"/resources/\"+i+\".png\")); &#125; index=0; &#125; //飞行动作 public void fly() &#123; index++; image=images[(index/12)%8]; &#125; //移动一步 public void step() &#123; double v0=speed; //计算上抛运动位移 s=v0*t+g*t*t/2; //计算鸟的坐标位置 y=y-(int)s; //计算下次移动速度 double v=v0-g*t; speed=v; //计算倾角（反正切函数） alpha=Math.atan(s/8); &#125; //向上飞行 public void flappy() &#123; //重置速度 speed=v0; &#125; //检测小鸟是否碰撞到地面 public boolean hit(Ground ground) &#123; boolean hit=y+size/2&gt;ground.y; if(hit) &#123; y=ground.y-size/2; alpha=-3.14159265358979323/2; &#125; return hit; &#125; //检测小鸟是否撞到柱子 public boolean hit(Column column) &#123; //先检测是否在柱子的范围内 if(x&gt;column.x-column.width/2-size/2 &amp;&amp;x&lt;column.x+column.width/2+size/2) &#123; //再检测是否在柱子的缝隙中 if(y&gt;column.y-column.gap/2-size/2 &amp;&amp;y&lt;column.y+column.gap/2-size/2) &#123; return false; &#125; return true; &#125; return false; &#125;&#125; 2.定义地面类123456789101112131415161718192021222324252627282930import java.awt.image.BufferedImage;import javax.imageio.ImageIO;/** *地面 */public class Ground &#123; //图片 BufferedImage image; //位置 int x,y; //宽高 int width,height; //初始化地面 public Ground() throws Exception&#123; image=ImageIO.read(getClass().getResource(\"/resources/ground.png\")); width=image.getWidth(); height=image.getHeight(); x=0; y=500; &#125; //向左移动一步 public void step() &#123; x--; if(x==-109) &#123; x=0; &#125; &#125;&#125; 3.定义柱子类1234567891011121314151617181920212223242526272829303132333435363738import javax.imageio.ImageIO;import java.awt.image.BufferedImage;import java.util.Random;public class Column &#123; //图片 BufferedImage image; //位置 int x,y; //宽高 int width,height; //柱子之间的缝隙 int gap; //柱子之间的距离 int distance; //随机数工具 Random random=new Random(); /** * 初始化第N个柱子 */ public Column(int n) throws Exception&#123; image=ImageIO.read(getClass().getResource(\"/resources/column.png\")); width=image.getWidth(); height=image.getHeight(); gap=144; distance=245; x=550+(n-1)*distance; y=random.nextInt(218)+123; &#125; //向左移动一步 public void step() &#123; x--; if(x==-width/2) &#123; y=distance*2-width/2; y=random.nextInt(218)+132; x=550; &#125; &#125;&#125; 4.进行游戏初始化和开始游戏123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179package game;/** * 游戏界面 */import javax.imageio.ImageIO;import javax.swing.*;import java.awt.*;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.awt.event.MouseListener;import java.awt.image.BufferedImage;public class BirdGame extends JPanel &#123; // 背景图片 BufferedImage background; // 开始图片 BufferedImage startImage; // 结束图片 BufferedImage gameOverImage; // 地面 Ground ground; // 柱子 Column column1, column2; // 小鸟 Bird bird; // 游戏分数 int score; // 游戏状态 int state; // 状态常量 public static final int START = 0;// 开始 public static final int RUNNING = 1;// 运行 public static final int GAME_OVER = 2;// 结束 /** * 初始化游戏 */ public BirdGame() throws Exception &#123; // 初始化背景图片 background = ImageIO.read(getClass().getResource(\"/resources/bg.png\")); // 初始化开始、结束图片 startImage = ImageIO.read(getClass().getResource(\"/resources/start.png\")); gameOverImage = ImageIO.read(getClass().getResource(\"/resources/gameover.png\")); // 初始化地面、柱子、小鸟 ground = new Ground(); column1 = new Column(1); column2 = new Column(2); bird = new Bird(); // 初始化分数 score = 0; // 初始化状态 state = START; &#125; /** * 绘制界面 */ public void paint(Graphics g) &#123; // 绘制背景 g.drawImage(background, 0, 0, null); // 绘制地面 g.drawImage(ground.image, ground.x, ground.y, null); // 绘制柱子 g.drawImage(column1.image, column1.x - column1.width / 2, column1.y - column1.height / 2, null); g.drawImage(column2.image, column2.x - column2.width / 2, column2.y - column2.height / 2, null); // 绘制小鸟（旋转坐标系） Graphics2D g2 = (Graphics2D) g; g2.rotate(-bird.alpha, bird.x, bird.y); g.drawImage(bird.image, bird.x - bird.width / 2, bird.y - bird.height / 2, null); g2.rotate(bird.alpha, bird.x, bird.y); // 绘制分数 Font f = new Font(Font.SANS_SERIF, Font.BOLD, 40); g.setFont(f); g.drawString(\"\" + score, 40, 60); g.setColor(Color.WHITE); g.drawString(\"\" + score, 40 - 3, 60 - 3); // 绘制开始与结束界面 switch (state) &#123; case START: g.drawImage(startImage, 0, 0, null); break; case GAME_OVER: g.drawImage(gameOverImage, 0, 0, null); break; &#125; &#125; // 开始游戏 public void action() throws Exception &#123; MouseListener l = new MouseAdapter() &#123; // 鼠标按下事件 public void mousePressed(MouseEvent e) &#123; try &#123; switch (state) &#123; case START: // 在开始状态，按下鼠标则转为运行状态。 state = RUNNING; break; case RUNNING: // 在运行状态，按下鼠标则小鸟向上飞行。 bird.flappy(); break; case GAME_OVER: // 在结束状态，按下鼠标则重置数据，再次转为开始态。 column1 = new Column(1); column2 = new Column(2); bird = new Bird(); score = 0; state = START; break; &#125; &#125; catch (Exception ex) &#123; ex.printStackTrace(); &#125; &#125; &#125;; // 将***添加到当前的面板上 addMouseListener(l); // 不断的移动与重绘 while (true) &#123; switch (state) &#123; case START: // 小鸟做出飞行动作 bird.fly(); // 地面向左移动一步 ground.step(); break; case RUNNING: // 地面向左移动一步 ground.step(); // 柱子向左移动一步 column1.step(); column2.step(); // 小鸟做出飞行动作 bird.fly(); // 小鸟上下移动一步 bird.step(); // 计算分数 if (bird.x == column1.x || bird.x == column2.x) &#123; score++; &#125; // 检测是否发生碰撞 if (bird.hit(ground) || bird.hit(column1) || bird.hit(column2)) &#123; state = GAME_OVER; &#125; break; &#125; // 重新绘制界面 repaint(); // 休眠 1000/60 毫秒 Thread.sleep(1000 / 60); &#125; &#125; /** * 启动方法 */ public static void main(String[] args) throws Exception &#123; JFrame frame = new JFrame(); BirdGame game = new BirdGame(); frame.add(game); frame.setSize(440, 670); frame.setLocationRelativeTo(null); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setVisible(true); game.action(); &#125;&#125; 游戏中的图片资源：百度云盘链接提取码：bhab","categories":[],"tags":[{"name":"游戏","slug":"游戏","permalink":"http://yoursite.com/tags/%E6%B8%B8%E6%88%8F/"}]},{"title":"hello,这是一篇测试文章","slug":"hello-这是一篇测试文章","date":"2020-04-09T02:11:07.000Z","updated":"2020-04-09T02:47:51.151Z","comments":true,"path":"2020/04/09/hello-这是一篇测试文章/","link":"","permalink":"http://yoursite.com/2020/04/09/hello-%E8%BF%99%E6%98%AF%E4%B8%80%E7%AF%87%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/","excerpt":"题目描述： 123456789101112131415161718192021假设你正在爬楼梯。需要 n 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？注意：给定 n 是一个正整数。示例 1：输入： 2输出： 2解释： 有两种方法可以爬到楼顶。1. 1 阶 + 1 阶2. 2 阶示例 2：输入： 3输出： 3解释： 有三种方法可以爬到楼顶。1. 1 阶 + 1 阶 + 1 阶2. 1 阶 + 2 阶3. 2 阶 + 1 阶","text":"题目描述： 123456789101112131415161718192021假设你正在爬楼梯。需要 n 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？注意：给定 n 是一个正整数。示例 1：输入： 2输出： 2解释： 有两种方法可以爬到楼顶。1. 1 阶 + 1 阶2. 2 阶示例 2：输入： 3输出： 3解释： 有三种方法可以爬到楼顶。1. 1 阶 + 1 阶 + 1 阶2. 1 阶 + 2 阶3. 2 阶 + 1 阶 解题思路：1.该问题可以看成递归问题2.登上第n阶楼梯的方法，它可以从第n-1阶上来，也可以从第n-2阶上来，所以有f(n)=f(n-1)+f(n-2)3.但是用递归时间会超出了限制4.所以会用辅助数组来进行存储数据解题代码： 123456789101112131415public class Solution&#123; public int climbStairs(int n) &#123; if(n==1) &#123; return 1; &#125; int arr[]=new int[n+1]; arr[0]=0; arr[1]=1; arr[2]=2; for(int i=3;i&lt;=n;i++) &#123; arr[i]=arr[i-1]+arr[i-2]; &#125; return arr[n]; &#125;&#125;","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-04-08T15:06:34.120Z","updated":"2020-04-09T03:07:25.686Z","comments":true,"path":"2020/04/08/hello-world/","link":"","permalink":"http://yoursite.com/2020/04/08/hello-world/","excerpt":"基本操作","text":"基本操作 Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"游戏","slug":"游戏","permalink":"http://yoursite.com/tags/%E6%B8%B8%E6%88%8F/"}]}